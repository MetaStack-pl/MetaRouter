{
  "map" : {
    "code" : "println(details.parse(\"/details/42\"))",
    "language" : "scala",
    "result" : "Some(42)"
  },
  "url" : {
    "code" : "println(details.url(1))  // Shorter: details(1)",
    "language" : "scala",
    "result" : "/details/1"
  },
  "parse-path" : {
    "code" : "val result2 = trail.Path(\"/user/hello\", List(\"show\" -> \"false\")) match {\n  case details (a)      => s\"details: $a\"\n  case userInfo((u, s)) => s\"user: $u, show: $s\"\n}\nprintln(result2)",
    "language" : "scala",
    "result" : "user: hello, show: false"
  },
  "custom-arg" : {
    "code" : "import scala.util.Try\nimplicit case object IntSetArg extends Codec[Set[Int]] {\n  override def encode(s: Set[Int]): Option[String] = Some(s.mkString(\",\"))\n  override def decode(s: Option[String]): Option[Set[Int]] =\n    s.flatMap(value => Try(value.split(',').map(_.toInt).toSet).toOption)\n}\n\nval export = Root / \"export\" / Arg[Set[Int]]\nprintln(export.url(Set(1, 2, 3)))",
    "language" : "scala",
    "result" : "/export/1,2,3"
  },
  "query-params-opt" : {
    "code" : "val routeParamsOpt = Root / \"details\" & Param[Int](\"id\") & Param[Option[Boolean]](\"show\")\nprintln(routeParamsOpt.parse(\"/details?id=42\"))",
    "language" : "scala",
    "result" : "Some((42,None))"
  },
  "parse" : {
    "code" : "val userInfo = Root / \"user\" / Arg[String] & Param[Boolean](\"show\")\n\nval result = \"/user/hello?show=false\" match {\n  case details (a)      => s\"details: $a\"\n  case userInfo((u, s)) => s\"user: $u, show: $s\"\n}\nprintln(result)",
    "language" : "scala",
    "result" : "user: hello, show: false"
  },
  "query-params" : {
    "code" : "val route = Root / \"details\" & Param[Boolean](\"show\")\nprintln(route.parse(\"/details?show=false\"))",
    "language" : "scala",
    "result" : "Some(false)"
  },
  "route" : {
    "code" : "import trail._\nimport shapeless._\n\nval details = Root / \"details\" / Arg[Int]\nprintln(details)",
    "language" : "scala",
    "result" : "ConcatRight(ConcatRight(Root,Static(details)),Dynamic(Arg()))"
  },
  "custom-path-elem" : {
    "code" : "case class Foo(bar: String)\nimplicit object FooElement extends StaticElement[Foo](_.bar)\n\nprintln((Root / Foo(\"asdf\")).url(()))",
    "language" : "scala",
    "result" : "/asdf"
  },
  "query-fragment" : {
    "code" : "val routeFragment = Root $ Fragment[Int]\nprintln(routeFragment.parse(\"/#42\"))",
    "language" : "scala",
    "result" : "Some(42)"
  }
}