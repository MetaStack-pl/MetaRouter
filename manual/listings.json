{
  "uri-values" : {
    "code" : "val encoded = URI.encode(\"äöü\")\nprintln(encoded)\nprintln(URI.decode(encoded))",
    "language" : "scala",
    "result" : "%C3%A4%C3%B6%C3%BC\näöü"
  },
  "url" : {
    "code" : "println(details.url(1))\nprintln(details(1))",
    "language" : "scala",
    "result" : "/details/1\n/details/1"
  },
  "query-params-strict" : {
    "code" : "println(route.parseArgsStrict(\"/details/sub-page\"))\nprintln(route.parseArgsStrict(\"/details?show=false\"))\nprintln(route.parseArgsStrict(\"/details?show=false&a=b\"))\nprintln(route.parseArgsStrict(\"/details#frag\"))",
    "language" : "scala",
    "result" : "None\nSome(false)\nNone\nNone"
  },
  "parse-path" : {
    "code" : "val (requestPath, requestParams) = (\"/user/hello\", List(\"show\" -> \"false\"))\nval result2 = trail.Path(requestPath, requestParams) match {\n  case details (a)      => s\"details: $a\"\n  case userInfo((u, s)) => s\"user: $u, show: $s\"\n}\nprintln(result2)",
    "language" : "scala",
    "result" : "user: hello, show: false"
  },
  "additional-elems" : {
    "code" : "val routeAdditionalElems = Root / \"a\" / Elems\nprintln(routeAdditionalElems.parseArgs(\"/a/b/c\"))",
    "language" : "scala",
    "result" : "Some(List(b, c))"
  },
  "query-params-opt" : {
    "code" : "val routeParamsOpt = Root / \"details\" & Param[Int](\"id\") & Param[Option[Boolean]](\"show\")\nprintln(routeParamsOpt.parseArgs(\"/details?id=42\"))",
    "language" : "scala",
    "result" : "Some((42,None))"
  },
  "parse" : {
    "code" : "println(details.parse(\"/details/42\"))\nprintln(details.parse(\"/details/42/sub-page?name=value\"))\nprintln(details.parse(\"/details/42/sub-page?name=value#frag\"))",
    "language" : "scala",
    "result" : "Some((42,Path(,List(),None)))\nSome((42,Path(sub-page,List((name,value)),None)))\nSome((42,Path(sub-page,List((name,value)),Some(frag))))"
  },
  "query-params" : {
    "code" : "val route = Root / \"details\" & Param[Boolean](\"show\")\nprintln(route.parseArgs(\"/details/sub-page\"))\nprintln(route.parseArgs(\"/details?show=false\"))\nprintln(route.parseArgs(\"/details?show=false&a=b\"))\nprintln(route.parseArgs(\"/details#frag\"))",
    "language" : "scala",
    "result" : "None\nSome(false)\nSome(false)\nNone"
  },
  "routing-table" : {
    "code" : "val userInfo = Root / \"user\" / Arg[String] & Param[Boolean](\"show\")\n\nval result = \"/user/hello?show=false\" match {\n  case details (a)      => s\"details: $a\"\n  case userInfo((u, s)) => s\"user: $u, show: $s\"\n}\nprintln(result)",
    "language" : "scala",
    "result" : "user: hello, show: false"
  },
  "additional-params" : {
    "code" : "val routeAdditionalParams = Root / Arg[String] & Params\nprintln(routeAdditionalParams.parseArgs(\"/a?param1=value1&param2=value2\"))",
    "language" : "scala",
    "result" : "Some((a,List((param1,value1), (param2,value2))))"
  },
  "route" : {
    "code" : "import trail._\nval details = Root / \"details\" / Arg[Int]",
    "language" : "scala",
    "result" : null
  },
  "custom-path-elem" : {
    "code" : "case class Foo(bar: String)\nimplicit object FooElement extends StaticElement[Foo](_.bar)\n\nprintln((Root / Foo(\"asdf\")).url(()))",
    "language" : "scala",
    "result" : "/asdf"
  },
  "custom-codec" : {
    "code" : "import scala.util.Try\nimplicit case object IntSetCodec extends Codec[Set[Int]] {\n  override def encode(s: Set[Int]): Option[String] = Some(s.mkString(\",\"))\n  override def decode(s: Option[String]): Option[Set[Int]] =\n    s.flatMap(value =>\n      if (value.isEmpty) Some(Set())\n      else Try(value.split(',').map(_.toInt).toSet).toOption)\n}\n\nval export = Root / \"export\" / Arg[Set[Int]]\nprintln(export.url(Set(1, 2, 3)))",
    "language" : "scala",
    "result" : "/export/1,2,3"
  },
  "query-fragment" : {
    "code" : "val routeFragment = Root $ Fragment[Int]\nprintln(routeFragment.parseArgs(\"/#42\"))",
    "language" : "scala",
    "result" : "Some(42)"
  }
}